#Caesar Cipher
#Solution in Java
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    public static String caesarCipher(String s, int k) {
    int temp = 0;
    String cipher = "";
    int l = s.length();
    for(int i=0;i<l;i++){
        temp = (int)s.charAt(i);
        if(Character.isUpperCase(s.charAt(i))){
            temp = temp - 65;
            temp = temp + k;
            temp = temp % 26;
            temp = temp + 65;
            
        }
         else if(Character.isLowerCase(s.charAt(i))){
            temp = temp - 97;
            temp = temp + k;
            temp = temp % 26;
            temp = temp + 97;
            
        }
        cipher +=(char)temp;
    }
    return cipher;

    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String s = bufferedReader.readLine();

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        String result = Result.caesarCipher(s, k);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
